1.2.1 настройте репозитории pgdg.
  # yum install https://download.postgresql.org/pub/repos/yum/9.5/redhat/rhel-7-x86_64/pgdg-centos95-9.5-2.noarch.rpm

1.3.1 используйте sysctl для настройки vm, scheduler подсистем.
  # sysctl -w vm.dirty_background_bytes=$(( 64 * 1024 * 1024))
  # sysctl -w vm.dirty_bytes=$((n128 * 1024 * 1024))
  # sysctl -w kernel.sched_autogroup_enabled=0
  # sysctl -w kernel.sched_migration_cost_ns=5000000

1.3.1.a как зафиксировать на случай перезагрузки
  # /etc/sysctl.d/30-postgresql.conf
  # sysctl -p /etc/sysctl.d/30-postgresql.conf

1.3.2 настройте точки монтирования.
  # mount -o remount,nobarrier /

1.3.2.a как зафиксировать на случай перезагрузки
  # vi /etc/fstab
  -- edit mountpoint options

1.4.1 откройте порты postgresql, pgbouncer с помощью iptables/firewall-cmd
  # firewall-cmd --get-active-zones
  # firewall-cmd --zone=public --add-port=5432/tcp
  # firewall-cmd --zone=public --add-port=6432/tcp

1.4.1.a как зафиксировать на случай перезагрузки
  # firewall-cmd --zone=public --add-port=5432/tcp --permanent
  # firewall-cmd --zone=public --add-port=6432/tcp --permanent

2.1.1 определите список пакетов для установки и выполните установку.
  # yum search postgresql95 
  # yum install postgresql95-{server,contrib,devel,debuginfo}

2.1.2 создайте кластер (инстанс) бд.
  # su - postgres
  $ vi .bash_profile
    export PATH="$PATH:/usr/pgsql-9.5/bin"
  $ . .bash_profile
  $ initdb -D /var/lib/pgsql/9.5/data -E UTF8 --locale ru_RU.UTF-8
  $ pg_ctl -D /var/lib/pgsql/9.5/data start
  $ vi /var/lib/pgsql/9.5/data/postgresql.conf
    - listen_addresses = '*'
  $ /var/lib/pgsql/9.5/data/pg_hba.conf

2.2.1 установите pgbouncer, выполните начальную настройку в transaction pool режиме
  # yum install pgbouncer
  # vi /etc/pgbouncer/pgbouncer.ini
    - * = host=127.0.0.1
    - listen_addr = *
    - unix_socket_dir = /tmp
    - pool_mode = transaction
    - server_reset_query =
    - max_client_conn = 10000
    - default_pool_size = 40
    - log_connections = 0
    - log_disconnections = 0
    - server_lifetime = 7200
  # systemctl start pgbouncer
  # systemctl enable pgbouncer

3.2.1 сделайте резервную копию с помощью pg_dump
  # su - postgres
  $ pg_dumpall |less
  $ pg_dumpall > /var/lib/pgsql/9.5/backups/all.sql
  $ pg_dumpall -g > /var/lib/pgsql/9.5/backups/globals.sql
  $ pgbench -i
  $ pg_dump -t pgbench_accounts postgres > /var/lib/pgsql/9.5/backups/pgbench_accounts.sql
  $ pg_dump -n public postgres > /var/lib/pgsql/9.5/backups/schema.sql
  $ ls -l /var/lib/pgsql/9.5/backups/

3.2.2 сделайте резервную копию с помощью pg_basebackup
  $ vi /var/lib/pgsql/9.5/data/postgresql.conf
    - wal_level = hot_standby
    - max_wal_sender = 3
  $ vi /var/lib/pgsql/9.5/data/pg_hba.conf
    - local   replication     postgres                                trust
    - host    replication     postgres        127.0.0.1/32            trust 
  $ pg_ctl -D /var/lib/pgsql/9.5/data -m fast restart
  $ pg_basebackup -P -R -X stream -c fast -h 127.0.0.1 -U postgres -D /var/lib/pgsql/9.5/replica

3.3.1 настройте архивирование WAL
  $ vi /var/lib/pgsql/9.5/data/postgresql.conf
    - wal_level = hot_standby
    - archive_mode = on
    - archive_command = 'cp %p /dev/null'
  $ pg_ctl -D /var/lib/pgsql/9.5/data -m fast restart
  $ psql
  > select * from pg_stat_archiver;

3.5.1 восстановите таблицу из бэкапа сделаного через pg_dump.
  $ psql -c 'drop table pgbench_accounts' 
  $ psql -f /var/lib/pgsql/9.5/backups/pgbench_accounts.sql postgres

3.5.2 восстановите кластер из бэкапа сделаного через pg_basebackup
  $ rm /var/lib/pgsql/9.5/replica/recovery.conf
  $ vi /var/lib/pgsql/9.5/replica/postgresql.conf
    - port = 6432
  $ pg_ctl -D /var/lib/pgsql/9.5/replica start

4.2.1 настройте bgwriter "максимально аггрессивно"
  $ vi /var/lib/pgsql/9.5/replica/postgresql.conf
    - bgwriter_delay = 10ms
    - bgwriter_lru_maxpages = 1000
    - bgwriter_lru_multiplier = 10.0
  $ psql -c "select pg_reload_conf()"

4.2.2 настройте checkpointer 
  $ vi /var/lib/pgsql/9.5/replica/postgresql.conf
    - checkpoint_timeout = 30min
    - checkpoint_completion_target = 0.9
  $ psql -c "select pg_reload_conf()"

4.2.3 настройте autovacuum
  $ vi /var/lib/pgsql/9.5/replica/postgresql.conf 
    - vacuum_cost_page_hit = 1
    - vacuum_cost_page_miss = 1
    - vacuum_cost_page_dirty = 10
    - vacuum_cost_limit = 1000
    - autovacuum_vacuum_scale_factor = 0.01
    - autovacuum_vacuum_cost_delay = 5ms
  $ psql -c "select pg_reload_conf()"

4.3.1 настройте максимально информативное логирование
  $ vi /var/lib/pgsql/9.5/replica/postgresql.conf 
    - log_checkpoints = on
    - log_line_prefix = '%m %p %u@%d from %h [vxid:%v txid:%x] [%i] '
    - log_lock_waits = on
    - log_temp_files = 0
    - track_activities = on
    - track_counts = on
    - track_io_timing = on
    - track_functions = all
    - track_activity_query_size = 8192
    - log_autovacuum_min_duration = 10000

4.3.2 включите и настройте pg_stat_statements
  $ vi /var/lib/pgsql/9.5/replica/postgresql.conf 
    - shared_preload_libraries = 'pg_stat_statements'
    - pg_stat_statements.max = 10000
    - pg_stat_statements.track = top
    - pg_stat_statements.track_utility = false
    - pg_stat_statements.save = false

4.4.1 настройте опции оптимизатора для случая когда база полностью в shared_buffers
  $ vi /var/lib/pgsql/9.5/replica/postgresql.conf
    - seq_page_cost = 0.1
    - random_page_cost = 0.2

5.4.1 как просмотреть кол-во клиентов в постгресе
  $ psql
    - select * from pg_stat_activity;
    - select count(*) from pg_stat_activity;
    - select client_addr,usename,datname,count(*) from pg_stat_activity group by 1,2,3 order by 4 desc; 

5.4.2 как просмотреть список текущих или последних запросов
    - select usename,datname,now() - xact_start as age, query from pg_stat_activity order by 3 desc;

5.4.3 как просмотреть статистику по таблицам и индексам
    - select * from pg_stat_user_tables;
    - select * from pg_stat_user_indexes;

5.4.4 как просмотреть детальную статистику по запросам (pg_stat_statements)
    - create extension pg_stat_statements;
    - pgbench -c 2 -T 30
    - select * from pg_stat_statements;
